# This is a basic workflow to help you get started with Actions

name: dnstwist-tester

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events. Page deploy is limited to "main" branch,
  # see below.
  push:

  pull_request:

  schedule:
    - cron:  '0 0 * * *'

  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  collect-domains:
    runs-on: ubuntu-latest
    outputs:
      check_domains: ${{ steps.read-json.outputs.CHECK_DOMAINS }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read from JSON
        id: read-json
        shell: bash
        run: |
          CHECK_DOMAINS="$(cat .github/workflows/check_domains.json)"
          # See https://github.community/t/set-output-truncates-multiline-strings/16852/3
          CHECK_DOMAINS="${CHECK_DOMAINS//'%'/'%25'}"
          CHECK_DOMAINS="${CHECK_DOMAINS//$'\n'/'%0A'}"
          CHECK_DOMAINS="${CHECK_DOMAINS//$'\r'/'%0D'}"
          echo $CHECK_DOMAINS
          echo "::set-output name=CHECK_DOMAINS::$CHECK_DOMAINS"

  check-dnstwists:
    needs: [ collect-domains ]
    strategy:
      matrix:
        include: ${{ fromJson(needs.collect-domains.outputs.check_domains) }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker container with phash features
        run: |
          docker build -t elceef/dnstwist:phash - < Dockerfile-phash

      - name: Create screenshot directory
        run: |
          mkdir ${{ matrix.domain }}-screenshots

      - name: Check ${{ matrix.domain }} with dnstwist
        id: dnstwistcheck
        #uses: docker://elceef/dnstwist:phash
        #with:
        #  entrypoint: /opt/dnstwist/dnstwist.py
        #  args: ${{ matrix.args }} --format csv --output ${{ matrix.domain }}.csv ${{ matrix.domain }}
        run: |
          docker run --workdir /github/workspace -v "$GITHUB_WORKSPACE":/github/workspace --entrypoint /opt/dnstwist/dnstwist.py elceef/dnstwist:phash ${{ matrix.args }} --format csv --phash --screenshots ${{ matrix.domain }}-screenshots/ --output ${{ matrix.domain }}.csv ${{ matrix.domain }}

      - name: Failure, verbose inline check of ${{ matrix.domain }} with dnstwist
        if: ${{ failure() && steps.dnstwistcheck.conclusion == 'failure' }}
        uses: docker://elceef/dnstwist
        with:
          entrypoint: /opt/dnstwist/dnstwist.py
          args: ${{ matrix.args }} ${{ matrix.domain }}

      - name: Sort CSV of ${{ matrix.domain }} for stable ordering
        run: |
          cat ${{ matrix.domain }}.csv | (read -r; printf "%s\n" "$REPLY"; read -r; printf "%s\n" "$REPLY"; sort --field-separator=, --key=2) > ${{ matrix.domain }}-sorted.csv

      - name: Install dependencies for CSV parsing
        run: |
          sudo apt-get -y install --no-install-recommends python3-csvkit

      - name: Prepare HTML for ${{ matrix.domain }}
        run: |
          TITLE="Test of \"${{ matrix.domain }}\", last updated at $(date)"
          echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">' >> ${{ matrix.domain }}.html
          echo '<html>' >> ${{ matrix.domain }}.html
          echo '<head>' >> ${{ matrix.domain }}.html
          echo '<meta name="viewport" content="width=device-width, initial-scale=1" />' >> ${{ matrix.domain }}.html
          echo '<link rel="stylesheet" href="style.css">' >> ${{ matrix.domain }}.html
          echo "<title>${TITLE}</title></head>" >> ${{ matrix.domain }}.html
          echo "<body><h2>${TITLE}</h2>" >> ${{ matrix.domain }}.html
          cp ${{ matrix.domain }}.html ${{ matrix.domain }}-stable.html
          echo "<p><a href=\"index.html\">back to the index</a></p>" >> ${{ matrix.domain }}.html
          echo "<p><a href=\"index-stable.html\">back to the index</a></p>" >> ${{ matrix.domain }}-stable.html
          echo '<div id="dnstwist-results-block">' | tee -a ${{ matrix.domain }}.html ${{ matrix.domain }}-stable.html > /dev/null
          echo '<table id="dnstwist-results">' | tee -a ${{ matrix.domain }}.html ${{ matrix.domain }}-stable.html > /dev/null
          python3 ./make_table.py    -s ${{ matrix.domain }}-screenshots ${{ matrix.domain }}-sorted.csv >> ${{ matrix.domain }}.html
          python3 ./make_table.py -f -s ${{ matrix.domain }}-screenshots ${{ matrix.domain }}-sorted.csv >> ${{ matrix.domain }}-stable.html
          echo "</table>" | tee -a ${{ matrix.domain }}.html ${{ matrix.domain }}-stable.html > /dev/null
          echo "</div>" | tee -a ${{ matrix.domain }}.html ${{ matrix.domain }}-stable.html > /dev/null
          echo '</body></html>' | tee -a ${{ matrix.domain }}.html ${{ matrix.domain }}-stable.html > /dev/null

      - name: Upload artifacts for ${{ matrix.domain }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.domain }}
          path: |
            ${{ matrix.domain }}*.*
            ${{ matrix.domain }}-screenshots/
          retention-days: 2

  deploy-pages:
    needs: check-dnstwists
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: Install dependencies for CSV parsing
        run: |
          sudo apt-get -y install --no-install-recommends python3-csvkit

      - name: Move screenshot dirs to working directory for referencing in table
        run: |
          mv */*-screenshots .

      - name: Create a merged HTML
        run: |
          TITLE="dnstwist-tester results, last updated at $(date)"
          echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">' >> index.html
          echo '<html>' >> index.html
          echo '<head>' >> index.html
          echo '<meta name="viewport" content="width=device-width, initial-scale=1" />' >> index.html
          echo '<link rel="stylesheet" href="style.css">' >> index.html
          echo "<title>${TITLE}</title></head>" >> index.html
          echo "<body>" >> index.html
          echo "<h2>${TITLE}</h2>" >> index.html
          echo "<p>This page contains a list of domains checked with <a href=\"https://github.com/elceef/dnstwist\">dnstwist</a> at least daily via GitHub actions.</p>" >> index.html
          echo "<p>To get a domain added, open an issue / PR against the <a href=\"https://github.com/olifre/dnstwist-tester\">GitHub repo</a>.</p>" >> index.html
          cp index.html index-stable.html
          echo "<p>In case you want to watch this page for changes, it's recommended to use <a href=\"index-stable.html\">the stable index</a> instead, which has some unstable fields filtered out (e.g. banners, ssdeep).</p>" >> index.html
          echo "<p>This is the index page with some unstable fields filtered out. You may want to check <a href=\"index.html\">the full index</a> instead, which contains all fields.</p>" >> index-stable.html
          for domainData in */*-sorted.csv; do
            fileBase=$(basename $domainData)
            DOMAIN_NAME=${fileBase%-sorted.csv}
            echo "<h2><a href=\"${DOMAIN_NAME}.html\">${DOMAIN_NAME}</a></h2>" >> index.html
            echo "<h2><a href=\"${DOMAIN_NAME}-stable.html\">${DOMAIN_NAME}</a></h2>" >> index-stable.html
            echo '<div id="dnstwist-results-block">' | tee -a index.html index-stable.html > /dev/null
            echo '<table id="dnstwist-results">' | tee -a index.html index-stable.html > /dev/null
            python3 ./make_table.py    -s "${DOMAIN_NAME}-screenshots" $domainData >> index.html
            python3 ./make_table.py -f -s "${DOMAIN_NAME}-screenshots" $domainData >> index-stable.html
            echo "</table>" | tee -a index.html index-stable.html > /dev/null
            echo "</div>" | tee -a index.html index-stable.html > /dev/null
          done
          echo '</body></html>' | tee -a index.html index-stable.html > /dev/null
          echo "This is index.html:"
          cat index.html
          echo "This is index-stable.html:"
          cat index-stable.html

      - name: Move HTML files and style file
        run: |
          mkdir html
          mv */*.html html/
          mv ./*-screenshots html/
          mv index.html html/
          mv index-stable.html html/
          cp style.css html/

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: |
            (github.event_name == 'create' && github.event.ref_type == 'tag' && endsWith(github.event.ref, '/main'))
            || (github.event_name == 'push' && endsWith(github.event.ref, '/main'))
            || (github.event_name == 'schedule')
            || (github.event_name == 'workflow_dispatch')
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./html
          force_orphan: true
